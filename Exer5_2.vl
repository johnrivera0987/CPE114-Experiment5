module Moore_Model_Fig_5_19(
	output[1:0]	y_out,
	input		x_in, clock, reset
);

	reg[1:0]	state;
	parameter	S0 = 2'b00, S1=2'b01, S2=2'b10, S3 = 2'b11;
	always@(posedge clock, negedge reset)
		if(reset == 0) state<= S0;	//initialize to state S0
		else case (state)
			S0:	if(~x_in) state <= S1; else state <= S0;
			S1:	if(x_in)  state <= S2; else state <= S3;
			S2:	if(~x_in) state <= S3; else state <= S2;
			S3:	if(~x_in) state <= S0; else state <= S3;
			endcase
			assign y_out = state;	//output of flip-flops
endmodule



module mooreDiag;
	wire[1:0] t_y_out;
	reg  t_x_in, t_clock, t_reset;
	Moore_Model_Fig_5_19	mm(t_y_out, t_x_in, t_clock, t_reset);
	initial #16 $finish;
	initial begin
		t_clock = 0;
		forever #1 t_clock=~t_clock;
	end
	initial fork
		$monitor($time,,"reset=%b clock=%b x=%b y=%b", t_reset, t_clock, t_x_in, t_y_out);
		t_reset=0;
	#1	t_reset=0;
	#5	t_reset=1; 
	#9	t_reset=0;
	#13	t_reset=1;
		t_x_in=0;
	#1	t_x_in=0;
	#3	t_x_in=1;
	#5	t_x_in=0;
	#7	t_x_in=1;
	#9	t_x_in=0;
	#11	t_x_in=1;
	#13	t_x_in=0;
	#15	t_x_in=1;
	join
endmodule